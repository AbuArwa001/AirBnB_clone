import unittest
from unittest.mock import patch
from io import StringIO
from console import HBNBCommand

class TestHBNBCommand(unittest.TestCase):

    def setUp(self):
        self.console = HBNBCommand()

    def test_quit_command(self):
        with patch('sys.stdout', new=StringIO()) as fake_out:
            self.console.onecmd("quit")
            self.assertEqual(fake_out.getvalue().strip(), "")

    def test_EOF_command(self):
        with patch('sys.stdout', new=StringIO()) as fake_out:
            self.console.onecmd("EOF")
            self.assertEqual(fake_out.getvalue().strip(), "")

    def test_create_command(self):
        with patch('sys.stdout', new=StringIO()) as fake_out:
            self.console.onecmd("create BaseModel")
            output = fake_out.getvalue().strip()
            self.assertTrue(len(output) > 0)
            # Assuming output is an ID generated by BaseModel
            self.assertTrue(len(output.split("-")) == 5)

    def test_show_command(self):
        with patch('sys.stdout', new=StringIO()) as fake_out:
            self.console.onecmd("show BaseModel")
            self.assertEqual(fake_out.getvalue().strip(), "** instance id missing **")

    def test_destroy_command(self):
        with patch('sys.stdout', new=StringIO()) as fake_out:
            self.console.onecmd("destroy BaseModel")
            self.assertEqual(fake_out.getvalue().strip(), "** instance id missing **")

    def test_update_command(self):
        with patch('sys.stdout', new=StringIO()) as fake_out:
            self.console.onecmd("update BaseModel")
            self.assertEqual(fake_out.getvalue().strip(), "** instance id missing **")

    def test_all_command(self):
        with patch('sys.stdout', new=StringIO()) as fake_out:
            self.console.onecmd("all BaseModel")
            # Modify the expected value to match an empty string
            self.assertEqual(fake_out.getvalue().strip(), '[]')

if __name__ == '__main__':
    unittest.main()
